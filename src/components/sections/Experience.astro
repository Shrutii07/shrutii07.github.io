---
import { getCollection } from 'astro:content';
import { sortExperiencesByDate } from '../../utils/dateHelpers';

// Get all experience entries with enhanced error handling
let experiences;
let sortedExperiences: Array<{
  slug: string;
  data: import('../../content/config').ExperienceData;
}> = [];

try {
  experiences = await getCollection('experience');
  
  if (experiences && experiences.length > 0) {
    // Enhanced validation for experience data
    const validExperiences = experiences.filter(exp => {
      const { company, position, startDate } = exp.data;
      
      // Check required fields
      if (!company || !position || !startDate) {
        console.warn(`Invalid experience entry: ${exp.slug} - missing required fields (company: ${!!company}, position: ${!!position}, startDate: ${!!startDate})`);
        return false;
      }
      
      // Validate date format
      const dateRegex = /^\d{4}-\d{2}$/;
      if (!dateRegex.test(startDate)) {
        console.warn(`Invalid start date format for ${company}: ${startDate}. Expected format: YYYY-MM`);
        return false;
      }
      
      // Validate end date if provided
      if (exp.data.endDate && exp.data.endDate !== 'present' && !dateRegex.test(exp.data.endDate)) {
        console.warn(`Invalid end date format for ${company}: ${exp.data.endDate}. Expected format: YYYY-MM or 'present'`);
        return false;
      }
      
      // Validate achievements array
      if (exp.data.achievements && !Array.isArray(exp.data.achievements)) {
        console.warn(`Invalid achievements format for ${company}: expected array`);
        exp.data.achievements = [];
      }
      
      // Validate technologies array
      if (exp.data.technologies && !Array.isArray(exp.data.technologies)) {
        console.warn(`Invalid technologies format for ${company}: expected array`);
        exp.data.technologies = [];
      }
      
      return true;
    });
    
    sortedExperiences = sortExperiencesByDate(validExperiences);
    console.log(`Loaded ${sortedExperiences.length} valid experience entries`);
  } else {
    console.info('No experience entries found in content/experience/ directory');
  }
} catch (error) {
  console.error('Error loading experience collection:', error);
  sortedExperiences = [];
}
---

<section id="experience" class="py-12 sm:py-16 md:py-20 bg-white dark:bg-gray-900 transition-colors">
  <div class="mx-auto max-w-5xl px-4 sm:px-6 lg:px-8">
    <!-- Section Header -->
    <div class="section-header text-center mb-6 sm:mb-8">
      <h2 class="text-xl sm:text-2xl md:text-3xl font-bold tracking-tight text-gray-900 dark:text-white">
        Experience
      </h2>
    </div>

    <!-- Timeline Container -->
    <div class="timeline-container relative">
      {sortedExperiences.length > 0 ? (
        <div class="timeline-wrapper">
          {sortedExperiences.map((experience, index) => (
            <!-- Compact Timeline Item -->
            <div class="timeline-item relative flex gap-4 pb-6 group">
              <!-- Timeline connector -->
              <div class="timeline-connector flex flex-col items-center flex-shrink-0">
                <!-- Company logo circle -->
                <div class="timeline-dot relative z-10 flex h-12 w-12 items-center justify-center rounded-full bg-white dark:bg-gray-800 border-2 border-blue-500 shadow-lg">
                  {experience.data.logo ? (
                    <img 
                      src={`/${experience.data.logo}`} 
                      alt={`${experience.data.company} logo`}
                      class="h-8 w-8 rounded-full object-contain bg-white dark:bg-gray-100"
                      loading="lazy"
                    />
                  ) : (
                    <div class="h-8 w-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
                      <span class="text-white text-xs font-semibold">
                        {experience.data.company.split(' ').map(word => word.charAt(0)).slice(0, 2).join('')}
                      </span>
                    </div>
                  )}
                </div>
                
                <!-- Connecting line -->
                {index !== sortedExperiences.length - 1 && (
                  <div class="timeline-line w-0.5 flex-1 bg-gray-300 dark:bg-gray-600 mt-2"></div>
                )}
              </div>

              <!-- Content -->
              <div class="timeline-content flex-1 min-w-0">
                <!-- Header -->
                <div class="mb-3">
                  <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-1 mb-2">
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white leading-tight">
                      {experience.data.position}
                    </h3>
                    <div class="text-sm text-gray-600 dark:text-gray-400 sm:text-right flex-shrink-0">
                      {(() => {
                        const startParts = experience.data.startDate.split('-');
                        const startDate = new Date(parseInt(startParts[0]), parseInt(startParts[1]) - 1);
                        const startFormatted = startDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });
                        
                        let endFormatted = 'Present';
                        if (experience.data.endDate && experience.data.endDate !== 'present') {
                          const endParts = experience.data.endDate.split('-');
                          const endDate = new Date(parseInt(endParts[0]), parseInt(endParts[1]) - 1);
                          endFormatted = endDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });
                        }
                        
                        return `${startFormatted} - ${endFormatted}`;
                      })()}
                    </div>
                  </div>
                  
                  <div class="flex flex-col sm:flex-row sm:items-center gap-2 mb-2">
                    <div class="flex items-center gap-2">
                      {experience.data.website ? (
                        <a 
                          href={experience.data.website}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="text-base font-medium text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors"
                        >
                          {experience.data.company}
                        </a>
                      ) : (
                        <span class="text-base font-medium text-gray-800 dark:text-gray-200">
                          {experience.data.company}
                        </span>
                      )}
                      <span class="text-gray-500 dark:text-gray-400">â€¢</span>
                      <span class="text-sm text-gray-600 dark:text-gray-400">{experience.data.location}</span>
                    </div>
                  </div>
                </div>

                <!-- Achievements -->
                {experience.data.achievements && experience.data.achievements.length > 0 && (
                  <div class="achievements-container mb-3">
                    <!-- First 3 achievements (always visible) -->
                    <ul class="space-y-1">
                      {experience.data.achievements.slice(0, 3).map((achievement) => (
                        <li class="flex items-start gap-2">
                          <div class="w-1.5 h-1.5 rounded-full bg-blue-500 mt-2 flex-shrink-0"></div>
                          <span class="text-sm text-gray-700 dark:text-gray-300">{achievement}</span>
                        </li>
                      ))}
                    </ul>
                    
                    {experience.data.achievements.length > 3 && (
                      <>
                        <!-- Expandable achievements (hidden by default) -->
                        <ul class="additional-achievements space-y-1 mt-1 max-h-0 overflow-hidden transition-all duration-300 ease-in-out">
                          {experience.data.achievements.slice(3).map((achievement) => (
                            <li class="flex items-start gap-2">
                              <div class="w-1.5 h-1.5 rounded-full bg-blue-500 mt-2 flex-shrink-0"></div>
                              <span class="text-sm text-gray-700 dark:text-gray-300">{achievement}</span>
                            </li>
                          ))}
                        </ul>
                        
                        <!-- Toggle button -->
                        <button 
                          class="achievements-toggle flex items-center gap-1 text-xs text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors mt-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 rounded"
                          aria-expanded="false"
                          data-experience-slug={experience.slug}
                        >
                          <span class="toggle-text">+{experience.data.achievements.length - 3} more achievements</span>
                          <svg 
                            class="toggle-icon w-3 h-3 transition-transform duration-200" 
                            fill="none" 
                            stroke="currentColor" 
                            viewBox="0 0 24 24"
                          >
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                          </svg>
                        </button>
                      </>
                    )}
                  </div>
                )}

                <!-- Technologies -->
                {experience.data.technologies && experience.data.technologies.length > 0 && (
                  <div>
                    <div class="flex flex-wrap gap-1">
                      {experience.data.technologies.map((tech) => (
                        <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
                          {tech}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      ) : (
        <!-- Fallback content -->
        <div class="text-center py-12">
          <div class="mx-auto h-12 w-12 text-gray-400 dark:text-gray-600">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2V6"></path>
            </svg>
          </div>
          <h3 class="mt-4 text-lg font-medium text-gray-900 dark:text-white">
            No experience entries found
          </h3>
          <p class="mt-2 text-gray-600 dark:text-gray-400">
            Add experience entries to the content/experience/ directory to display your professional journey.
          </p>
        </div>
      )}
    </div>

    <!-- Call to Action -->
    {sortedExperiences.length > 0 && (
      <div class="cta-section text-center mt-8 sm:mt-12 px-4">
        <p class="text-gray-600 dark:text-gray-400 mb-4 sm:mb-6 text-sm sm:text-base">
          Interested in working together? Let's connect!
        </p>
        <a 
          href="#contact" 
          class="inline-flex items-center gap-2 px-4 sm:px-6 py-2.5 sm:py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900 min-h-[44px] touch-manipulation text-sm sm:text-base"
        >
          Get in Touch
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
          </svg>
        </a>
      </div>
    )}
  </div>
</section>

<style>
  .timeline-container {
    position: relative;
  }

  /* Compact timeline wrapper */
  .timeline-wrapper {
    opacity: 1;
    transform: none;
  }

  /* Add a subtle timeline line */
  .timeline-container::before {
    content: '';
    position: absolute;
    left: 1.25rem;
    top: 0;
    bottom: 0;
    width: 1px;
    background: linear-gradient(
      to bottom,
      transparent 0%,
      rgba(59, 130, 246, 0.3) 10%,
      rgba(59, 130, 246, 0.3) 90%,
      transparent 100%
    );
    z-index: 0;
  }

  /* Responsive timeline background line */
  @media (max-width: 640px) {
    .timeline-container::before {
      left: 1rem;
    }
  }

  @media (min-width: 641px) {
    .timeline-container::before {
      left: 1.5rem;
    }
  }

  /* Section header */
  .section-header {
    opacity: 1;
    transform: translateY(0);
  }

  /* Call to action styling */
  .cta-section {
    opacity: 1;
    transform: translateY(0);
  }

  /* Dark theme adjustments */
  .dark .timeline-container::before {
    background: linear-gradient(
      to bottom,
      transparent 0%,
      rgba(96, 165, 250, 0.4) 10%,
      rgba(96, 165, 250, 0.4) 90%,
      transparent 100%
    );
  }

  /* Expandable achievements styles */
  .additional-achievements {
    transition: max-height 0.3s cubic-bezier(0.4, 0, 0.2, 1),
                opacity 0.3s ease-in-out,
                padding 0.3s ease-in-out;
    opacity: 0;
  }

  .additional-achievements.expanded {
    opacity: 1;
    padding-top: 0.25rem;
  }

  .achievements-toggle {
    transition: color 0.2s ease;
    border-radius: 0.25rem;
    padding: 0.25rem;
    margin: -0.25rem;
  }

  .achievements-toggle:hover {
    background-color: rgba(59, 130, 246, 0.1);
  }

  .toggle-icon {
    transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .achievements-toggle[aria-expanded="true"] .toggle-icon {
    transform: rotate(180deg);
  }

  /* Focus styles for accessibility */
  .achievements-toggle:focus {
    background-color: rgba(59, 130, 246, 0.1);
  }
</style>

<script>
  // Expandable achievements functionality
  document.addEventListener('DOMContentLoaded', () => {
    const achievementToggles = document.querySelectorAll('.achievements-toggle');
    
    achievementToggles.forEach((toggle) => {
      const container = toggle.closest('.achievements-container');
      const additionalAchievements = container?.querySelector('.additional-achievements');
      const toggleText = toggle.querySelector('.toggle-text');
      
      if (additionalAchievements && toggleText) {
        const additionalElement = additionalAchievements as HTMLElement;
        const totalAdditional = additionalElement.children.length;
        
        toggle.addEventListener('click', () => {
          const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
          
          if (isExpanded) {
            // Collapse
            additionalElement.style.maxHeight = additionalElement.scrollHeight + 'px';
            
            // Force reflow
            additionalElement.offsetHeight;
            
            additionalElement.style.maxHeight = '0px';
            additionalElement.classList.remove('expanded');
            
            toggle.setAttribute('aria-expanded', 'false');
            toggleText.textContent = `+${totalAdditional} more achievements`;
          } else {
            // Expand
            additionalElement.style.maxHeight = additionalElement.scrollHeight + 'px';
            additionalElement.classList.add('expanded');
            
            toggle.setAttribute('aria-expanded', 'true');
            toggleText.textContent = 'Show less';
            
            // Reset max-height after animation completes
            setTimeout(() => {
              if (toggle.getAttribute('aria-expanded') === 'true') {
                additionalElement.style.maxHeight = 'none';
              }
            }, 300);
          }
        });
      }
    });

    // Simple smooth scroll for CTA link
    const ctaLink = document.querySelector('.cta-section a[href="#contact"]');
    if (ctaLink) {
      ctaLink.addEventListener('click', (e) => {
        e.preventDefault();
        const contactSection = document.getElementById('contact');
        if (contactSection) {
          contactSection.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    }
  });
</script>