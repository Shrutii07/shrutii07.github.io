---
import { getCollection } from 'astro:content';
import type { ProfileData } from '../../content/config';

// Get profile data with error handling
let profileEntry;
let profile: ProfileData;

try {
  const profileEntries = await getCollection('profile');
  profileEntry = profileEntries[0];
} catch (error) {
  console.warn('Failed to load profile collection:', error);
}

// Fallback data in case profile is missing or invalid
const fallbackProfile: ProfileData = {
  name: "ML Engineer",
  title: "Machine Learning Engineer",
  bio: "Passionate about building AI solutions that make a real impact. Experienced in developing scalable machine learning systems and deploying models in production environments.",
  email: "contact@example.com",
  location: "San Francisco, CA",
  profileImage: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face",
  social: {
    github: "your-github",
    linkedin: "your-linkedin",
    twitter: "your-twitter",
    scholar: "your-scholar-id"
  }
};

// Use profile data with fallbacks for individual fields
if (profileEntry?.data) {
  profile = {
    name: profileEntry.data.name || fallbackProfile.name,
    title: profileEntry.data.title || fallbackProfile.title,
    bio: profileEntry.data.bio || fallbackProfile.bio,
    email: profileEntry.data.email || fallbackProfile.email,
    location: profileEntry.data.location || fallbackProfile.location,
    profileImage: profileEntry.data.profileImage || fallbackProfile.profileImage,
    social: {
      github: profileEntry.data.social?.github || "",
      linkedin: profileEntry.data.social?.linkedin || "",
      twitter: profileEntry.data.social?.twitter || "",
      scholar: profileEntry.data.social?.scholar || ""
    }
  };
} else {
  profile = fallbackProfile;
}

// Social media platform configurations with validation
const socialPlatforms = [
  {
    name: 'GitHub',
    key: 'github' as keyof typeof profile.social,
    icon: 'github',
    baseUrl: 'https://github.com/',
    color: 'hover:text-gray-900 dark:hover:text-white',
    validate: (username: string) => /^[a-zA-Z0-9]([a-zA-Z0-9]|-){0,38}$/.test(username)
  },
  {
    name: 'LinkedIn',
    key: 'linkedin' as keyof typeof profile.social,
    icon: 'linkedin',
    baseUrl: 'https://linkedin.com/in/',
    color: 'hover:text-blue-600',
    validate: (username: string) => username.length > 0 && username.length <= 100
  },
  {
    name: 'Twitter',
    key: 'twitter' as keyof typeof profile.social,
    icon: 'twitter',
    baseUrl: 'https://twitter.com/',
    color: 'hover:text-blue-400',
    validate: (username: string) => /^[a-zA-Z0-9_]{1,15}$/.test(username)
  },
  {
    name: 'Google Scholar',
    key: 'scholar' as keyof typeof profile.social,
    icon: 'scholar',
    baseUrl: 'https://scholar.google.com/citations?user=',
    color: 'hover:text-blue-500',
    validate: (id: string) => id.length > 0 && id.length <= 50
  }
];

// Filter and validate social links
const activeSocialLinks = socialPlatforms.filter(platform => {
  const value = profile.social[platform.key];
  if (!value || value.trim() === '') return false;
  
  try {
    return platform.validate(value.trim());
  } catch (error) {
    console.warn(`Invalid ${platform.name} username/id: ${value}`);
    return false;
  }
}).map(platform => ({
  ...platform,
  value: profile.social[platform.key]?.trim() || ''
}));
---

<section id="hero" class="relative min-h-[70vh] flex items-center justify-center px-4 sm:px-6 lg:px-8 py-8 sm:py-12 lg:py-16 bg-gradient-to-br from-background via-background to-gray-50 dark:to-gray-900">
  <!-- Neural Network Background -->
  <div class="neural-bg" id="neural-background"></div>
  <div class="container max-w-6xl mx-auto relative z-10">
    <div class="flex flex-col lg:flex-row items-center gap-6 sm:gap-8 lg:gap-12">
      
      <!-- Profile Image -->
      <div class="flex-shrink-0 animate-fade-in animate-stagger-1">
        <div class="relative">
          <div class="w-32 h-32 sm:w-40 sm:h-40 md:w-48 md:h-48 lg:w-56 lg:h-56 rounded-full overflow-hidden bg-surface shadow-xl ring-4 ring-blue-200 dark:ring-blue-800 transition-all duration-500 hover:ring-blue-300 dark:hover:ring-blue-700 hover:shadow-2xl">
            <img
              src={profile.profileImage}
              alt={`${profile.name} - ${profile.title}`}
              class="hero-profile-image w-full h-full object-cover transition-transform duration-500 hover:scale-105"
              loading="eager"
              decoding="async"
              width="320"
              height="320"

            />
          </div>
          
          <!-- Decorative elements -->
          <div class="absolute -top-4 -right-4 w-8 h-8 bg-primary rounded-full animate-pulse"></div>
          <div class="absolute -bottom-2 -left-2 w-6 h-6 bg-accent rounded-full animate-pulse" style="animation-delay: 0.5s;"></div>
        </div>
      </div>

      <!-- Content -->
      <div class="flex-1 text-center lg:text-left space-y-4">
        
        <!-- Name with typewriter -->
        <div class="animate-slide-up animate-stagger-2">
          <h1 class="text-xl sm:text-2xl md:text-3xl lg:text-4xl xl:text-5xl font-bold text-text mb-1 leading-tight">
            <span class="typewriter" data-text={profile.name}></span>
          </h1>
          <h2 class="text-base sm:text-lg md:text-xl lg:text-2xl font-medium text-primary mb-2">
            <span class="rotating-title" data-titles='["Machine Learning Engineer", "AI Researcher", "Data Scientist", "Deep Learning Specialist", "ML Systems Engineer"]'></span>
          </h2>
        </div>

        <!-- Bio -->
        <div class="animate-slide-up animate-stagger-3">
          <p class="text-sm sm:text-base md:text-lg text-text-muted max-w-xl leading-relaxed">
            {profile.bio}
          </p>
        </div>

        <!-- Location -->
        <div class="animate-slide-up animate-stagger-4">
          <div class="flex items-center justify-center lg:justify-start gap-2 text-text-muted">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            <span>{profile.location}</span>
          </div>
        </div>

        <!-- Social Links -->
        {activeSocialLinks.length > 0 && (
          <div class="animate-slide-up animate-stagger-5">
            <div class="flex items-center justify-center lg:justify-start gap-4 pt-4">
              {activeSocialLinks.map((platform) => (
                <a
                  href={`${platform.baseUrl}${platform.value}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  class={`p-3 rounded-full bg-surface hover:bg-primary transition-all duration-300 transform hover:scale-110 hover:-translate-y-1 shadow-md hover:shadow-lg ${platform.color} group`}
                  aria-label={`Visit ${profile.name}'s ${platform.name} profile`}
                  title={`${platform.name}: ${platform.value}`}
                >
                  {platform.icon === 'github' && (
                    <svg class="w-6 h-6 transition-colors duration-300 group-hover:text-white" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                    </svg>
                  )}
                  
                  {platform.icon === 'linkedin' && (
                    <svg class="w-6 h-6 transition-colors duration-300 group-hover:text-white" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                    </svg>
                  )}
                  
                  {platform.icon === 'twitter' && (
                    <svg class="w-6 h-6 transition-colors duration-300 group-hover:text-white" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                    </svg>
                  )}
                  
                  {platform.icon === 'scholar' && (
                    <svg class="w-6 h-6 transition-colors duration-300 group-hover:text-white" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M5.242 13.769L0 9.5 12 0l12 9.5-5.242 4.269C17.548 11.249 14.978 9.5 12 9.5c-2.977 0-5.548 1.748-6.758 4.269zM12 10a7 7 0 1 0 0 14 7 7 0 0 0 0-14z"/>
                    </svg>
                  )}
                </a>
              ))}
            </div>
          </div>
        )}

        <!-- Call to Action -->
        <div class="animate-slide-up animate-stagger-6">
          <div class="flex flex-col sm:flex-row items-center justify-center lg:justify-start gap-2 sm:gap-3 pt-4">
            <a
              href={`mailto:${profile.email}`}
              class="btn btn-primary w-full sm:w-auto px-4 sm:px-6 py-2 text-sm sm:text-base font-semibold rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 min-h-[40px] touch-manipulation"
            >
              Get In Touch
            </a>
            <a
              href="#experience"
              class="btn btn-secondary w-full sm:w-auto px-4 sm:px-6 py-2 text-sm sm:text-base font-semibold rounded-full border-2 border-primary text-primary hover:bg-primary hover:text-white transition-all duration-300 min-h-[40px] touch-manipulation"
            >
              View Experience
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Scroll indicator -->
  <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 animate-bounce">
    <a
      href="#experience"
      class="flex flex-col items-center text-text-muted hover:text-primary transition-colors duration-300"
      aria-label="Scroll to experience section"
    >
      <span class="text-xs mb-1">More</span>
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
      </svg>
    </a>
  </div>
</section>

<style>
  /* Typewriter effect */
  .typewriter {
    display: inline-block;
    border-right: 2px solid var(--color-primary);
    animation: blink 1s infinite;
  }

  @keyframes blink {
    0%, 50% { border-color: var(--color-primary); }
    51%, 100% { border-color: transparent; }
  }

  /* Enhanced animations for reduced motion users */
  @media (prefers-reduced-motion: reduce) {
    .typewriter {
      border-right: none;
      animation: none;
    }
    
    .animate-bounce {
      animation: none;
    }
  }

  /* Gradient background animation */
  .bg-gradient-to-br {
    background-size: 400% 400%;
    animation: gradientShift 8s ease infinite;
  }

  @keyframes gradientShift {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .bg-gradient-to-br {
      animation: none;
    }
  }
</style>

<script>
  // Typewriter effect
  function initTypewriter() {
    const typewriterElement = document.querySelector('.typewriter') as HTMLElement;
    if (!typewriterElement) return;

    // Prevent multiple initializations
    if (typewriterElement.dataset.initialized === 'true') return;
    typewriterElement.dataset.initialized = 'true';

    const text = typewriterElement.getAttribute('data-text') || '';
    
    // Check for reduced motion preference
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      typewriterElement.textContent = text;
      typewriterElement.style.borderRight = 'none';
      return;
    }

    // Ensure element is completely empty
    typewriterElement.innerHTML = '';
    typewriterElement.textContent = '';
    
    let i = 0;
    const typeSpeed = 60; // Faster typing
    
    function typeChar() {
      if (i < text.length && typewriterElement) {
        typewriterElement.textContent = text.substring(0, i + 1);
        i++;
        setTimeout(typeChar, typeSpeed);
      } else {
        // Stop blinking cursor quickly
        setTimeout(() => {
          if (typewriterElement) {
            typewriterElement.style.borderRight = 'none';
          }
        }, 500);
      }
    }
    
    // Start typing immediately
    setTimeout(typeChar, 200);
  }

  // Image error handling
  function initImageErrorHandling() {
    const profileImage = document.querySelector('.hero-profile-image') as HTMLImageElement;
    if (profileImage) {
      profileImage.addEventListener('error', () => {
        profileImage.src = 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face';
      });
    }
  }

  // Rotating titles effect
  function initRotatingTitles() {
    const rotatingElement = document.querySelector('.rotating-title') as HTMLElement;
    if (!rotatingElement) return;

    const titlesData = rotatingElement.getAttribute('data-titles');
    if (!titlesData) return;

    const titles = JSON.parse(titlesData);
    let currentIndex = 0;
    
    // Check for reduced motion preference
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      rotatingElement.textContent = titles[0];
      return;
    }

    function typeTitle(title: string, callback?: () => void) {
      let i = 0;
      rotatingElement.textContent = '';
      
      function typeChar() {
        if (i < title.length) {
          rotatingElement.textContent = title.substring(0, i + 1);
          i++;
          setTimeout(typeChar, 80);
        } else {
          setTimeout(() => {
            // Erase the title
            let j = title.length;
            function eraseChar() {
              if (j > 0) {
                rotatingElement.textContent = title.substring(0, j - 1);
                j--;
                setTimeout(eraseChar, 40);
              } else {
                callback && callback();
              }
            }
            setTimeout(eraseChar, 2000); // Wait 2 seconds before erasing
          }, 100);
        }
      }
      typeChar();
    }

    function nextTitle() {
      typeTitle(titles[currentIndex], () => {
        currentIndex = (currentIndex + 1) % titles.length;
        setTimeout(nextTitle, 500); // Brief pause between titles
      });
    }

    // Start the rotation
    setTimeout(nextTitle, 1000); // Wait 1 second before starting
  }

  // Subtle cursor trail effect
  function initCursorTrail() {
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) return;
    
    const trail: HTMLElement[] = [];
    const trailLength = 8;
    
    // Create trail elements
    for (let i = 0; i < trailLength; i++) {
      const dot = document.createElement('div');
      dot.className = 'cursor-trail-dot';
      dot.style.cssText = `
        position: fixed;
        width: ${6 - i * 0.5}px;
        height: ${6 - i * 0.5}px;
        background: rgba(59, 130, 246, ${0.8 - i * 0.1});
        border-radius: 50%;
        pointer-events: none;
        z-index: 9999;
        transition: all 0.1s ease;
        transform: translate(-50%, -50%);
      `;
      document.body.appendChild(dot);
      trail.push(dot);
    }

    let mouseX = 0, mouseY = 0;
    let positions = Array(trailLength).fill({ x: 0, y: 0 });

    document.addEventListener('mousemove', (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
    });

    function updateTrail() {
      positions[0] = { x: mouseX, y: mouseY };
      
      for (let i = 1; i < trailLength; i++) {
        positions[i] = {
          x: positions[i].x + (positions[i - 1].x - positions[i].x) * 0.3,
          y: positions[i].y + (positions[i - 1].y - positions[i].y) * 0.3
        };
      }

      trail.forEach((dot, i) => {
        dot.style.left = positions[i].x + 'px';
        dot.style.top = positions[i].y + 'px';
      });

      requestAnimationFrame(updateTrail);
    }

    updateTrail();
  }

  // Neural network background
  function initNeuralBackground() {
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) return;
    
    const neuralBg = document.getElementById('neural-background');
    if (!neuralBg) return;

    const nodes: { x: number; y: number; element: HTMLElement }[] = [];
    const nodeCount = 15;

    // Create nodes
    for (let i = 0; i < nodeCount; i++) {
      const node = document.createElement('div');
      node.className = 'neural-node';
      
      const x = Math.random() * 100;
      const y = Math.random() * 100;
      
      node.style.left = x + '%';
      node.style.top = y + '%';
      node.style.animationDelay = Math.random() * 4 + 's';
      
      neuralBg.appendChild(node);
      nodes.push({ x, y, element: node });
    }

    // Create connections between nearby nodes
    nodes.forEach((nodeA, i) => {
      nodes.forEach((nodeB, j) => {
        if (i !== j) {
          const distance = Math.sqrt(
            Math.pow(nodeA.x - nodeB.x, 2) + Math.pow(nodeA.y - nodeB.y, 2)
          );
          
          if (distance < 25) { // Only connect nearby nodes
            const connection = document.createElement('div');
            connection.className = 'neural-connection';
            
            const angle = Math.atan2(nodeB.y - nodeA.y, nodeB.x - nodeA.x);
            const length = distance;
            
            connection.style.left = nodeA.x + '%';
            connection.style.top = nodeA.y + '%';
            connection.style.width = length + '%';
            connection.style.transform = `rotate(${angle}rad)`;
            connection.style.transformOrigin = '0 50%';
            connection.style.animationDelay = Math.random() * 3 + 's';
            
            neuralBg.appendChild(connection);
          }
        }
      });
    });
  }

  // Floating code particles
  function initCodeParticles() {
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) return;
    
    const codeSnippets = [
      'import tensorflow as tf',
      'model.fit(X_train, y_train)',
      'np.array([[1, 0], [0, 1]])',
      'sklearn.ensemble.RandomForest',
      'torch.nn.functional.relu',
      'pd.DataFrame.groupby()',
      'cv2.imread(image_path)',
      'plt.scatter(x, y)',
      'from transformers import',
      'accuracy_score(y_true, y_pred)'
    ];

    function createCodeParticle() {
      const particle = document.createElement('div');
      particle.className = 'code-particle';
      particle.textContent = codeSnippets[Math.floor(Math.random() * codeSnippets.length)];
      
      particle.style.left = Math.random() * 100 + '%';
      particle.style.animationDuration = (10 + Math.random() * 10) + 's';
      particle.style.animationDelay = Math.random() * 5 + 's';
      
      document.body.appendChild(particle);
      
      // Remove particle after animation
      setTimeout(() => {
        if (particle.parentNode) {
          particle.parentNode.removeChild(particle);
        }
      }, 20000);
    }

    // Create particles periodically
    setInterval(createCodeParticle, 3000);
  }

  // Initialize on DOM content loaded
  document.addEventListener('DOMContentLoaded', () => {
    initTypewriter();
    initImageErrorHandling();
    initRotatingTitles();
    initCursorTrail();
    initNeuralBackground();
    initCodeParticles();
  });
  
  // Also initialize immediately in case DOMContentLoaded already fired
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initTypewriter();
      initImageErrorHandling();
    });
  } else {
    initTypewriter();
    initImageErrorHandling();
  }

  // Smooth scroll for internal links
  document.addEventListener('DOMContentLoaded', () => {
    const scrollLinks = document.querySelectorAll('a[href^="#"]');
    
    scrollLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        const targetElement = document.getElementById(targetId || '');
        
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  });
</script>