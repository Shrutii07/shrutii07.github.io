---
import { getCollection } from 'astro:content';

// Add DevIcon CSS
const devIconCSS = 'https://cdn.jsdelivr.net/gh/devicons/devicon@latest/devicon.min.css';

// Get skills data from markdown file - force rebuild
const skillsEntries = await getCollection('skills');
const skillsData = skillsEntries[0]?.data;

// Icon mapping based on skill names (since markdown parsing has issues)
const getSkillIconPath = (skillName: string) => {
  const iconMap: Record<string, string> = {
    // Programming Languages
    'Python': '/icons/python.png',
    'JavaScript': '/icons/javascript.png',
    'TypeScript': '/icons/typescript.png',
    'Java': '/icons/java.png',
    'SQL': '/icons/sql.png',
    // ML & AI
    'TensorFlow': '/icons/tensorflow.png',
    'PyTorch': '/icons/pytorch.png',
    'HuggingFace': '/icons/huggingface.png',
    'LangChain': '/icons/langchain.png',
    'LangGraph': '/icons/langgraph.png',
    'Scikit-learn': '/icons/scikit-learn.png',
    'Pandas': '/icons/pandas.png',
    'NumPy': '/icons/numpy.png',
    // Cloud & DevOps
    'AWS': '/icons/aws.png',
    'Docker': '/icons/docker.png',
    'Kubernetes': '/icons/kubernetes.png',
    'MLOps': '/icons/mlops.png',
    'Git': '/icons/git.png',
    // Databases & Tools
    'PostgreSQL': '/icons/postgresql.png',
    'MongoDB': '/icons/mongodb.png',
    'Redis': '/icons/redis.png',
    'Jupyter': '/icons/jupyter.png',
    'VS Code': '/icons/vscode.png'
  };
  
  return iconMap[skillName] || '/icons/default.png';
};

const skillCategories = skillsData?.categories || [];

// Debug: Log skills data
console.log('Skills data loaded:', skillCategories.length, 'categories');
---

<section id="skills" class="py-12 sm:py-16 md:py-20 bg-white dark:bg-gray-900">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-6xl">
    <!-- Section Header -->
    <div class="text-center mb-8 sm:mb-12 md:mb-16">
      <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4 sm:mb-6">
        Technical Skills
      </h2>

      <div class="w-16 sm:w-20 h-1 bg-blue-600 mx-auto rounded-full"></div>
    </div>

    <!-- Skills Categories -->
    <div class="space-y-8 sm:space-y-10 md:space-y-12">
      {skillCategories.length > 0 ? skillCategories.map((category, categoryIndex) => (
        <div class="skill-category" style={`animation-delay: ${categoryIndex * 200}ms`}>
          <!-- Category Title -->
          <h3 class="text-lg sm:text-xl md:text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-4 sm:mb-6 md:mb-8 text-center">
            {category.name}
          </h3>
          
          <!-- Skills Grid -->
          <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 sm:gap-4 md:gap-6">
            {category.skills.map((skill, skillIndex) => (
              <div 
                class="skill-card group cursor-pointer"
                style={`animation-delay: ${(categoryIndex * 200) + (skillIndex * 100)}ms`}
              >
                <div class="bg-white dark:bg-gray-800 rounded-xl p-3 sm:p-4 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 border border-gray-100 dark:border-gray-700 min-h-[80px] sm:min-h-[90px] flex flex-col items-center justify-center">
                  <!-- Icon -->
                  <div class="flex justify-center mb-2">
                    <div class="w-8 h-8 sm:w-10 sm:h-10 flex items-center justify-center">
                      <img 
                        src={getSkillIconPath(skill.name)} 
                        alt={skill.name}
                        width="32" 
                        height="32" 
                        class="skill-icon w-6 h-6 sm:w-8 sm:h-8"
                        loading="lazy"
                        onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                      />
                      <div class="w-6 h-6 sm:w-8 sm:h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center text-white text-xs font-bold hidden">
                        {skill.name.slice(0,2).toUpperCase()}
                      </div>
                    </div>
                  </div>
                  
                  <!-- Skill Name -->
                  <h4 class="text-xs sm:text-sm font-semibold text-gray-900 dark:text-white text-center leading-tight">
                    {skill.name}
                  </h4>
                </div>
              </div>
            ))}
          </div>
        </div>
      )) : (
        <!-- Fallback if no skills data -->
        <div class="text-center py-12">
          <p class="text-gray-600 dark:text-gray-400">Skills data is loading...</p>
        </div>
      )}
    </div>
  </div>
</section>

<style>
  .skill-category {
    opacity: 1;
    animation: fadeInUp 0.8s ease-out forwards;
  }

  .skill-card {
    opacity: 1;
    animation: slideInUp 0.6s ease-out forwards;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(20px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .skill-category,
    .skill-card {
      animation: none;
      opacity: 1;
      transform: none;
    }
  }

  /* Ensure skills are always visible on mobile */
  @media (max-width: 768px) {
    .skill-category,
    .skill-card {
      opacity: 1 !important;
      transform: none !important;
      animation: none !important;
    }
  }

  /* Icon styling */
  .skill-icon {
    transition: all 0.3s ease;
    display: block;
    margin: 0 auto;
  }

  .skill-card:hover .skill-icon {
    transform: scale(1.1);
  }

  /* Ensure icons display properly */
  .skill-card img {
    max-width: 100%;
    height: auto;
  }
</style>