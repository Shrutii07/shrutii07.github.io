---
export interface Props {
  title: string;
  description: string;
  image: string;
  github?: string;
  demo?: string;
  tags: string[];
  index?: number;
  award?: string;
  hackathon?: string;
  teamSize?: number;
  paper?: string;
  paperTitle?: string;
  venue?: string;
  accuracy?: string;
  f1Score?: string;
  precision?: string;
}

const { title, description, image, github, demo, tags, award, hackathon, teamSize, paper, venue, accuracy, f1Score, precision } = Astro.props;

// Tag color mapping for different technologies
const tagColors: Record<string, string> = {
  // ML/DL Frameworks
  'TensorFlow': 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300',
  'PyTorch': 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300',
  'Keras': 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300',
  'Scikit-learn': 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300',
  
  // Computer Vision
  'OpenCV': 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
  'YOLOv8': 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300',
  'U-Net': 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300',
  'Computer Vision': 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
  
  // Programming Languages
  'Python': 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300',
  'JavaScript': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300',
  'TypeScript': 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
  'R': 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
  
  // Web Technologies
  'React': 'bg-cyan-100 text-cyan-800 dark:bg-cyan-900/30 dark:text-cyan-300',
  'FastAPI': 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300',
  'Flask': 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300',
  
  // Data & Infrastructure
  'Apache Kafka': 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300',
  'Redis': 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300',
  'PostgreSQL': 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
  'Docker': 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
  'Kubernetes': 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
  
  // Specialized
  'DICOM': 'bg-teal-100 text-teal-800 dark:bg-teal-900/30 dark:text-teal-300',
  'Medical AI': 'bg-pink-100 text-pink-800 dark:bg-pink-900/30 dark:text-pink-300',
  'Healthcare': 'bg-pink-100 text-pink-800 dark:bg-pink-900/30 dark:text-pink-300',
  'NLP': 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300',
  'BERT': 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300',
  'Real-time': 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300',
  'Real-time Processing': 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300',
};

// Default color for unknown tags
const defaultTagColor = 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300';

// Get color for a tag
const getTagColor = (tag: string): string => {
  return tagColors[tag] || defaultTagColor;
};
---

<div 
  class="project-card group relative bg-surface rounded-xl shadow-md border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-xl"
>
  <!-- Project Image -->
  <div class="relative aspect-video overflow-hidden bg-gray-100 dark:bg-gray-800">
    <img
      src={image.startsWith('http') ? image : `/${image}`}

      alt={`${title} project screenshot`}
      class="project-image w-full h-full object-cover"

      decoding="async"

    />
    

    
    <!-- Overlay on hover -->
    <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100">
      <div class="absolute bottom-3 sm:bottom-4 left-3 sm:left-4 right-3 sm:right-4">
        <div class="flex gap-2">
          {github && (
            <a
              href={github}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center gap-1.5 sm:gap-2 px-2.5 sm:px-3 py-1.5 sm:py-2 bg-white/90 hover:bg-white text-gray-900 rounded-lg font-medium text-xs sm:text-sm min-h-[36px] touch-manipulation"
              aria-label={`View ${title} source code on GitHub`}
            >
              <svg class="w-3.5 h-3.5 sm:w-4 sm:h-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
              </svg>
              <span class="hidden xs:inline">Code</span>
            </a>
          )}
          
          {demo && (
            <a
              href={demo}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center gap-1.5 sm:gap-2 px-2.5 sm:px-3 py-1.5 sm:py-2 bg-primary hover:bg-blue-600 text-white rounded-lg font-medium text-xs sm:text-sm min-h-[36px] touch-manipulation"
              aria-label={`View ${title} live demo`}
            >
              <svg class="w-3.5 h-3.5 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
              </svg>
              <span class="hidden xs:inline">Demo</span>
            </a>
          )}

          {paper && (
            <a
              href={paper}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center gap-1.5 sm:gap-2 px-2.5 sm:px-3 py-1.5 sm:py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium text-xs sm:text-sm min-h-[36px] touch-manipulation"
              aria-label={`View ${title} research paper`}
            >
              <svg class="w-3.5 h-3.5 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <span class="hidden xs:inline">Paper</span>
            </a>
          )}
        </div>
      </div>
    </div>
  </div>

  <!-- Project Content -->
  <div class="p-3 sm:p-4">
    <!-- Title -->
    <h3 class="text-base sm:text-lg font-semibold text-text mb-1 sm:mb-2 group-hover:text-primary leading-tight">
      {title}
    </h3>
    
    <!-- Award Badge -->
    {(award || paper) && (
      <div class="flex flex-wrap items-center gap-2 mb-2">
        {award && (
          <span class="inline-flex items-center px-2 py-1 bg-gradient-to-r from-yellow-400 to-orange-500 text-white text-xs font-bold rounded-full shadow-sm">
            {award}
          </span>
        )}
        {paper && (
          <span class="inline-flex items-center px-2 py-1 bg-gradient-to-r from-green-500 to-emerald-600 text-white text-xs font-bold rounded-full shadow-sm">
            ðŸ“„ Published
          </span>
        )}
        {hackathon && (
          <span class="text-xs text-gray-600 dark:text-gray-400 font-medium">
            {hackathon}
          </span>
        )}
        {venue && (
          <span class="text-xs text-gray-600 dark:text-gray-400 font-medium">
            {venue}
          </span>
        )}
        {teamSize && (
          <span class="text-xs text-gray-500 dark:text-gray-500">
            Team of {teamSize}
          </span>
        )}
      </div>
    )}

    <!-- ML Metrics -->
    {(accuracy || f1Score || precision) && (
      <div class="flex flex-wrap gap-2 mb-2">
        {accuracy && (
          <span class="ml-metric">
            Accuracy: {accuracy}
          </span>
        )}
        {f1Score && (
          <span class="ml-metric">
            F1: {f1Score}
          </span>
        )}
        {precision && (
          <span class="ml-metric">
            Precision: {precision}
          </span>
        )}
      </div>
    )}
    
    <!-- Description -->
    <div class="description-container mb-2 sm:mb-3">
      <p class="description-text text-text-muted text-xs sm:text-sm leading-relaxed line-clamp-2 cursor-pointer hover:text-text transition-colors duration-200" 
         data-project-title={title}>
        {description}
      </p>
      <button class="read-more-btn text-xs text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors mt-1 hidden">
        Read more
      </button>
    </div>
    
    <!-- Tech Stack Tags -->
    <div class="flex flex-wrap gap-1">
      {tags.slice(0, 4).map((tag) => (
        <span 
          class={`inline-flex items-center px-1.5 py-0.5 rounded text-xs font-medium touch-manipulation ${getTagColor(tag)}`}
        >
          {tag}
        </span>
      ))}
      {tags.length > 4 && (
        <span class="inline-flex items-center px-1.5 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-400">
          +{tags.length - 4}
        </span>
      )}
    </div>
  </div>

  <!-- External link indicators -->
  {(github || demo) && (
    <div class="absolute top-3 right-3 flex gap-1 opacity-0 group-hover:opacity-100">
      {github && (
        <div class="w-2 h-2 bg-gray-600 dark:bg-gray-400 rounded-full" title="GitHub repository available"></div>
      )}
      {demo && (
        <div class="w-2 h-2 bg-primary rounded-full" title="Live demo available"></div>
      )}
    </div>
  )}
</div>

<style>
  /* Line clamp utility for description */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Expandable description styles */
  .description-text.expanded {
    display: block;
    -webkit-line-clamp: unset;
  }

  .description-container {
    transition: all 0.3s ease;
  }

  .read-more-btn {
    transition: color 0.2s ease;
  }

  .read-more-btn:hover {
    text-decoration: underline;
  }

  /* Minimal hover effects for performance */
  .project-card:hover {
    box-shadow: 
      0 25px 50px -12px rgba(0, 0, 0, 0.15),
      0 0 0 1px rgba(255, 255, 255, 0.1);
    z-index: 10;
  }

  .dark .project-card:hover {
    box-shadow: 
      0 25px 50px -12px rgba(0, 0, 0, 0.4),
      0 0 0 1px rgba(255, 255, 255, 0.1);
  }

  /* Focus styles for accessibility */
  .project-card:focus-within {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  /* Minimal link button styles */
  .project-card a {
    position: relative;
  }

  /* Simple tag hover effects */
  .project-card span:hover {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .dark .project-card span:hover {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }
</style>

<script>
  // Expandable description functionality
  document.addEventListener('DOMContentLoaded', () => {
    const descriptionTexts = document.querySelectorAll('.description-text');
    
    descriptionTexts.forEach((desc) => {
      const container = desc.closest('.description-container');
      const readMoreBtn = container?.querySelector('.read-more-btn');
      
      if (desc && readMoreBtn) {
        const descElement = desc as HTMLElement;
        const btnElement = readMoreBtn as HTMLElement;
        
        // Check if text is actually clamped (overflowing)
        const isOverflowing = descElement.scrollHeight > descElement.clientHeight;
        
        if (isOverflowing) {
          btnElement.classList.remove('hidden');
        }
        
        // Click handler for description text
        descElement.addEventListener('click', () => {
          const isExpanded = descElement.classList.contains('expanded');
          
          if (isExpanded) {
            // Collapse
            descElement.classList.remove('expanded');
            btnElement.textContent = 'Read more';
          } else {
            // Expand
            descElement.classList.add('expanded');
            btnElement.textContent = 'Read less';
          }
        });
        
        // Click handler for read more button
        btnElement.addEventListener('click', (e) => {
          e.stopPropagation();
          descElement.click();
        });
      }
    });
  });
</script>